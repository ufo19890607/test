spec: Update dracut dependency to enable more algorithms as FIPS compliant
Revert "enlarge stack guard gap"
tcmu: break up free_device callback
tcmu: perfom device add and del synchronously
tcmu: use idr for se_device dev index
tcmu: prep for sync add/rm device support
efi: Make efi/esrt.c driver explicitly non-modular
mntns: Remove incorrect put_mnt_ns
boot/kaslr: Skip kernel text relocation if no kaslr action is done
wacom: fix Wacom Cintiq 27QHD max pressure
revert "nohz: Fix collision between tick and other hrtimers"
keys: Change the name of the dead type to ".dead" to prevent user access
keys: Protect request_key() against a type with no match function
keys: Disallow keyrings beginning with '.' to be joined as session keyrings
enlarge stack guard gap
submit nvme_admin_activate_fw to admin queue
hmm: RHEL specific, properly handle pte_file() case within HMM
hmm: remove extra sanity check to avoid crash
revert "dm mirror: use all available legs on multiple failures"
dm-raid: up target version to show MD deadlock fixes are present
fix suspend/write deadlock
fix single core deadlock
complete introduction of feature word 16
tcmu: increase ring buffer size
random: If we have arch_get_random_seed*(), try it before blocking
random: Use arch_get_random_seed*() at init time and once a second
mnt: Move unprivileged use of the mntns to tech preview
revert "xfs: fix bogus space reservation in xfs_iomap_write_allocate"
raid1: ignore discard error
boot/kaslr: Change the 'KASLR disabled' message from warning to debug printing
kvm: fix spin_lock_init order on x86
vfs: fix locks_lock_file_wait() on overlayfs
dmaengine: ioatdma: add BDX-EP PCI dev IDs
userns: Preserve bug compatibility on failure for chrome
kvm: x86: Expose Intel AVX512IFMA/AVX512VBMI/SHA features to guest
kaslr: Use the right memcpy() implementation
documentation/kernel-parameters.txt: Update 'memmap=' boot option description
kaslr: Handle the memory limit specified by the 'memmap=' and 'mem=' boot options
kaslr: Parse all 'memmap=' boot option entries
efi: Correct ident mapping of efi old_map when kalsr enabled
kaslr: Fix kexec kernel boot crash when KASLR randomization fails
mark AMD Naples SP3 processors supported
set x86_model_id in early_identify_cpu for unsupported check
tools: Be consistent on the type of map->symbols[]
hmm: workaround kABI breakage because of new migrate mode enum
migrate: allow migrate_vma() to alloc new page on empty entry v2
migrate: support un-addressable ZONE_DEVICE page in migration v2
migrate: new memory migration helper for use with device memory v4
hmm/devmem: support device memory in CPU snapshot helpers
hmm/devmem: dummy HMM device for ZONE_DEVICE memory v3
hmm/devmem: device memory hotplug using ZONE_DEVICE v4
private-memory: new type of ZONE_DEVICE for unaddressable memory v2
put_page: move ZONE_DEVICE page reference decrement v2
hmm/mirror: helper to snapshot CPU page table v3
hmm/mirror: mirror process address space on device with HMM helpers v3
hmm: heterogeneous memory management (HMM for short) v3
hmm: remove old code to prepare for lastest patchset backport
hugetlb: don't call region_abort if region_chg fails
mce/amd: Give a name to MCA bank 3 when accessed with legacy MSRs
boot/kaslr: Disable KASLR by default
microcode/intel: access the initrd at the relocated address
msi: Stop disabling MSI/MSI-X in pci_device_shutdown()
Add target_core_user.h to included headers
raid1: avoid unnecessary spin locks in I/O barrier code
raid1: a new I/O barrier implementation to remove resync window
pm / sleep: prohibit devices probing during suspend/hibernation
drivercore: Make probe deferral more quiet
kvm: x86: lower default for halt_poll_ns
kvm: nvmx: initialize PML fields in vmcs02
kvm: nvmx: do not leak PML full vmexit to L1
tun: tx batching
aslr: use get_random_long()
sunrpc: fix refcounting problems with auth_gss messages
sunrpc: allow for upcalls for same uid but different gss service
nfsd: Get reference of lockowner when coping file_lock
nfsd: New helper nfs4_get_stateowner() for atomic_inc sop reference
acpica: tables: Update FADT handling
acpica: acpi 6.0: Add changes for FADT table
xen: don't crash under Xen hypervisors which present bogus topology
gfs2: Allow glocks to be unlocked after withdraw
kvm: x86: fix emulation of RSM and IRET instructions
{sb, skx}_edac: Use Intel model macros instead of open-coding them
revert "nvmet_fc: cleanup of abort flag processing in fcp_op_done"
revert "nvme-fc: don't bother to validate ioccsz and iorcsz"
revert "nvme_fc: Sync FC-NVME header with standard"
revert "nvme_fc: Add check of status_code in ERSP_IU"
revert "nvmet_fc: Sync NVME LS reject reasons with spec"
revert "nvme_fc: correct LS validation"
revert "nvmet_fc: Clear SG list to avoid double frees"
revert "nvme_fc: Clean up host fcpio done status handling"
revert "nvmet_fc: add target feature flags for upcall isr contexts"
revert "nvmet_fc: add req_release to lldd api"
revert "nvme_fcloop: split job struct from transport for req_release"
revert "nvmet_fc: Rework target side abort handling"
revert "nvmet_fc: add missing reference in add_port"
revert "nvme_fc: Move LS's to rport"
revert "nvme_fc: Add ls aborts on remote port teardown"
revert "nvme_fc: fix command id check"
revert "nvme_fc: add aen abort to teardown"
revert "nvme_fc: add controller reset support"
revert "nvme-fc: add .map_queue entry to blk_mq_ops"
revert "nvme_fc: avoid double kfree(), don't call nvme_cleanup_cmd() in nvme_fc_unmap_data()"
memblock: fix memblock_next_valid_pfn()
llvmlinux: Fix "incomplete type const struct x86cpu_device_id"
kvm: x86: Add MSR_AMD64_DC_CFG to the list of ignored MSRs
Mark AMD Naples/Ryzen as unsupported
mpx: saving FPU in do_bounds()
revert "mm: Fix gup_huge_p?d() to handle large PAT bit"
revert "mm: Simplify get_user_pages() PTE bit handling"
revert "mm: fix gup_pte_range() vs DAX mappings"
replace with & on data path
nfs4: remove a redundant lock range check
proc: fix GPF in /proc/$PID/map_files
config: enable dlm for ppc64le
configs: enable gfs2 for ppc64le
kvm: x86: bump KVM_(SOFT_)MAX_VCPUS to 384
kvm: x86: fix out-of-bounds accesses of rtc_eoi map
kvm: x86: bump KVM_MAX_VCPU_ID to 1023
intel_rdt: Fix the notifier priority crash
Avoid output of ioapic probe error
acpi: Return -EPROBE_DEFER if the gpiochip was not found
compiler-gcc: integrate the various compiler-gcc[345].h
pciehp: Clean up dmesg "Slot(s)" messages
uapi: Fix exposed undefined u32 and u64 types to userland through /usr/include/linux/md_p.h
mm: Simplify get_user_pages() PTE bit handling
Mark Intel Knights Mill processor as supported
nvme_fc: avoid double kfree(), don't call nvme_cleanup_cmd() in nvme_fc_unmap_data()
nvme-fc: add .map_queue entry to blk_mq_ops
pm / sleep: add configurable delay for pm_test
acpi / video: Fix lockdep issue
locking/atomic, arch/x86: Implement atomic{, 64}_fetch_{add, sub, and, or, xor}()
locking, arch: Use ACCESS_ONCE() instead of cast to volatile in atomic_read()
include/linux/rwsem.h: add '<linux/err.h>' include
replace ALUA transition wait/flush with mutex
ib/uverbs: Enable WQ creation and modification with cvlan offload
ib/uverbs: Expose vlan offloads capabilities
documentation, x86: Documentation for Intel resource allocation user interface
intel: Add get_cpu_cache_id function
n_hdlc: get rid of racy n_hdlc.tbuf ("Herton R.
ceph: remove bogus warnings from ceph_releasepage
ceph: get caps when handling splice()
sunrpc: Silence WARN_ON when NFSv4.1 over RDMA is in use
userns: Avoid panics by reserving space in user_table for future ucounts
apei: Fix leaked resources
apei: erst: Fixed leaked resources in erst_init
efi: Do not handle BGRT image in kdump kernel
mm/kaslr: EFI region is mistakenly included into KASLR VA space for randomization
uaccess.h: Include linux/sched.h
microcode/amd: Fix load of builtin microcode with randomized memory
microcode/amd: Make amd_ucode_patch[]
microcode/amd: Fix initrd loading with CONFIG_RANDOMIZE_MEMORY=y
revert "kdump, vmcoreinfo: report memory sections virtual addresses"
mm/kaslr: Increase BRK pages for KASLR memory randomization
mm/kaslr: Fix physical memory calculation on KASLR memory randomization
revert "Use pte_none() to test for empty PTE"
powerpc: Fix copy_file_range syscall
s390: set NR_syscalls to 376
userns: Remove user namespaces from tech preview status
userns: By default allow 0 user namespaces in RHEL7
userns: Document per user per user namespace limits
mntns: Add a limit on the number of mount namespaces ("Eric W. Biederman")
ipcns: Add a limit on the number of ipc namespaces
rhel: device-dax: only support page-sized faults
rdma: Don't reference kernel private header from UAPI header
rdma/qedr: Add uapi header qedr-abi.h
ib/cxgb3: fix misspelling in header guard
revert "net/mlx5: Add MPCNT register infrastructure"
rdma uapi: Use __kernel_sockaddr_storage
ib/uverbs: Extend modify_qp and support packet pacing
ib/mlx5: Report mlx5 packet pacing capabilities when querying device
ib/mlx5: Use kernel driver to help userspace create ah
ib/mlx5: Report that device has udata response in create_ah
ib/uverbs: Add support for Vxlan protocol
ib/mlx5: Add support for CQE compressing
ib/mlx5: Report mlx5 CQE compression caps during query
ib/mlx5: Report mlx5 multi packet WQE caps during query
ib/hfi1: Disable header suppression for short packets
pci: Add Mellanox device IDs
userfaultfd: shmem: use __SetPageSwapBacked in shmem_mcopy_atomic_pte()
userfaultfd: non-cooperative: add event for memory unmap to mm/fremap.c
userfaultfd: non-cooperative: rename *EVENT_MADVDONTNEED to *EVENT_REMOVE
userfaultfd: hugetlbfs: backport build fixes
userfaultfd: shmem: backport build fixes
hugetlbfs: unmap pages if page fault raced with hole punch update locking
hugetlbfs: add hugetlbfs_fallocate() update locking
locking/rwsem: Fix rwsem kABI issues
platform/uv/bau: Fix HUB errors by remove initial write to sw-ack register
platform/uv/bau: Implement uv4_wait_completion with read_status
platform/uv/bau: Add wait_completion to bau_operations
platform/uv/bau: Add status mmr location fields to bau_control
platform/uv/bau: Cleanup bau_operations declaration and instances
platform/uv/bau: Add payload descriptor qualifier
platform/uv/bau: Add uv_bau_version enumerated constants
Update rt2x00 driver to work with cfg80211 from linux-4.11-rc1
Update mwifiex driver to compile with cfg80211 from linux-4.11-rc1
Update brcmfmac driver to compile with cfg80211 from linux-4.11-rc1
Update iwlegacy driver to compile with cfg80211 from linux-4.11-rc1
Backport iwlwifi driver from linux-4.11-rc1
Backport wil6210 driver from linux-4.11-rc1
Backport ath10k driver from linux-4.11-rc1
Backport ath9k driver from linux-4.11-rc1
Backport net/mac80211 from linux-4.11-rc1
Backport net/wireless from linux-4.11-rc1
usbip: remove staged driver
usb: bcma: support old USB 2.0 controller on Northstar devices
usb: ehci: declare hostpc register as zero-length array
usb: leave LPM alone if possible when binding/unbinding interface drivers
usb: correct intervals for SS+
usb: LTM also for USB 3.1
usb: pd: additional feature selectors
usb: pd: define specific requests
usb: add descriptors from USB Power Delivery spec
acpica: linux: Allow ACPICA inclusion for CONFIG_ACPI=n builds
acpica: linux: Add support to exclude <asm/acenv.h> inclusion
acpica: linux headers: Add <asm/acenv.h> to remove mis-ordered inclusion of <asm/acpi.h>
acpica: linux headers: Add <acpi/platform/aclinuxex.h>
acpica: linux header: Add support for stubbed externals
acpica: osl: Add configurability for generic external functions
acpica: Add support to allow host OS to redefine individual OSL prototypes
redhat: mark NVMe over FC as tech preview
nvmet-rdma: +1 to *queue_size from hsqsize/hrqsize
ib/core: add support to create a unsafe global rkey to ib_create_pd
scatterlist.c: fix kerneldoc for sg_pcopy_{to, from}_buffer()
revert "mce: Do not panic when single core has reached a timeout"
vfs: normal filesystems (and lustre): d_inode() annotations
vfs: Convert S_ISLNK/DIR/REG(dentry->d_inode) to d_is_*(dentry)
vfs: allow ->d_manage() to declare -EISDIR in rcu_walk mode
Add may_detach_mounts sysctl to hide new behavior
make fs/{namespace, super}.c forget about acct.h
vfs: Make delayed_free() call free_vfsmnt()
get rid of {lock, unlock}_rcu_walk()
Use RH_KABI_EXTEND to wrap nameidata.m_seq
Readd include of linux/lglock.h in fs/internal.h to preserve the kabi
dax: move RADIX_DAX_* defines to dax.h
revert "mmc: sdhci: Reset cmd and data circuits after tuning failure"
sdhci: remove unneeded (void *) casts in sdhci_(pltfm_)priv()
sd: Export SD Status via "ssr" device attribute
